version: '2.0'

bitesize-cassandra.add_nodes_to_cassandra_ring:
  description: st2 workflow to add new nodes (seed | non-seed) and increase the total no.of non-seed nodes of the cluster.
  type: direct
  output:
    status_message: <% $.status_message %>

  input:
    - region
    - assume_role
    - cluster_name
    - number_of_nodes_toadd
    - node_type
    - consul_endpoint

  vars:
    # get the following variable values from Consul.

  tasks:

    assume_role:
      action: boto3.assume_role
      input:
        role_arn: <% $.assume_role %>
      publish:
        credentials: <% task(assume_role).result.result %>
        status_message: "Validate assume role."
      on-success:
        - select_node_type

    select_node_type:
      action: core.local
      input:
        cmd: "printf <% $.node_type %>"
      publish:
        path: <% task(select_node_type).result.stdout %>
        asg_name: <% 'cassandra-asg-' + $.cluster_name + "-" + task(select_node_type).result.stdout %>
        status_message: "Selecting node type between seed and nonseed."
      on-success:
        - check_asg

    check_asg:
      action: aws.boto3action
      input:
        region: <% $.region %>
        service: autoscaling
        action_name: describe_auto_scaling_groups
        params: <% dict(AutoScalingGroupNames => list($.asg_name)) %>
        credentials: <% $.credentials %>
      publish:
        new_desired_capacity: <% abs($.number_of_nodes_toadd) + task(check_asg).result.result.AutoScalingGroups[0].DesiredCapacity %>
        autoscaling_groups: <% task(check_asg).result.result.AutoScalingGroups %>
        max_size: <% task(check_asg).result.result.AutoScalingGroups[0].MaxSize %>
        status_message: "Retrieve autoscaling group data."
      on-success:
        - set_desired_capacity: <% len($.autoscaling_groups)!=0 and $.new_desired_capacity <= $.max_size %>

    set_desired_capacity:
      action: aws.boto3action
      input:
        region: <% $.region %>
        service: autoscaling
        action_name: set_desired_capacity
        params: <% dict(AutoScalingGroupName => $.asg_name, DesiredCapacity => $.new_desired_capacity, HonorCooldown => true) %>
        credentials: <% $.credentials %>
      publish:
        status_message: "Set autoscaling new desired capacity."