version: '2.0'

nibiru.create_mongo_asg:
  description: A Generic workflow that creates an asg in AWS.
  type: direct
  input:
    - Asg_name
    - Environment
    - App_type
    - LaunchConfigurationName
    - AvailabilityZones
    - MinSize
    - MaxSize
    - DesiredCapacity
    - Team
    - Region
    - ImageId
    - KeyName
    - SecurityGroups
    - IamInstanceProfile
    - EbsOptimized
    - InstanceType
    - VolumeSize
    - VolumeType
    - StorageType

  vars:
    UserData: |
              #!/bin/bash  
              cd /root && git clone https://github.com/Susanthab/my_projects.git mongo
              chmod +x ./mongo/aws/userdata_lc.sh
              ./mongo/aws/userdata_lc.sh
              
  tasks:

    t1:
      action: core.local
      input: 
        cmd: "printf <% $.StorageType %>"
      publish: 
        path: <% task(t1).result.stdout %>
      on-success:
        - create_launch_configuration_EBS: <% $.path = 'EBS' %>
        - create_launch_configuration_Ephemeral: <% $.path = 'Ephemeral' %>

    create_launch_configuration_EBS:
      action: boto3.action
      input:
        region: <% $.Region %>
        service: autoscaling
        action_name: create_launch_configuration
        params: <% dict(LaunchConfigurationName => $.LaunchConfigurationName , ImageId => $.ImageId, InstanceType => $.InstanceType, KeyName => $.KeyName, SecurityGroups => $.SecurityGroups, IamInstanceProfile => $.IamInstanceProfile, UserData => $.UserData, BlockDeviceMappings => list(dict(DeviceName => "/dev/sdg", Ebs => dict(VolumeSize => $.VolumeSize, VolumeType => $.VolumeType )))) %>
      on-success: 
        - create_auto_scaling_group

    create_launch_configuration_Ephemeral:
      action: boto3.action
      input:
        region: <% $.Region %>
        service: autoscaling
        action_name: create_launch_configuration
        params: <% dict(LaunchConfigurationName => $.LaunchConfigurationName , ImageId => $.ImageId, InstanceType => $.InstanceType, KeyName => $.KeyName, SecurityGroups => $.SecurityGroups, IamInstanceProfile => $.IamInstanceProfile, UserData => $.UserData, BlockDeviceMappings => list(dict(DeviceName => "/dev/sdc", VirtualName => "ephemeral1" ))) %>
      on-success:
        - create_auto_scaling_group

    create_auto_scaling_group:
      action: boto3.action
      input:
        region: <% $.Region %>
        service: autoscaling
        action_name: create_auto_scaling_group
        params: <% dict(LaunchConfigurationName => $.LaunchConfigurationName, AutoScalingGroupName => $.Asg_name, MinSize => $.MinSize, MaxSize => $.MaxSize, DesiredCapacity => $.DesiredCapacity, AvailabilityZones => $.AvailabilityZones, Tags => list(dict(Key => "Project", Value => "Nibiru-V3"), dict(Key => "Environment", Value => $.Environment), dict(Key => "App_type", Value => $.App_type), dict(Key => "Team", Value => $.Team), dict(Key => "Name", Value => "mongo-" + $.Environment + "-" + $.App_type + "-" + $.Team) )) %>