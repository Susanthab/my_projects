version: '2.0'

nibiru.create_mongo_asg:
  description: A Generic workflow that creates an asg in AWS.
  type: direct
  input:
    - Asg_name
    - Environment
    - App_type
    - LaunchConfigurationName
    - AvailabilityZones
    - MinSize
    - MaxSize
    - DesiredCapacity
    - Team
    - Region
    - ImageId
    - KeyName
    - SecurityGroups
    - IamInstanceProfile
    - EbsOptimized
    - InstanceType

  tasks:

    create_launch_configuration:
      action: boto3.action
      input:
        region: $.Region
        service: autoscaling
        action_name: create_launch_configuration
        params: <% dict(LaunchConfigurationName => $.LaunchConfigurationName , ImageId => $.ImageId, InstanceType => $.InstanceType, KeyName => $.KeyName, SecurityGroups => $.SecurityGroups, IamInstanceProfile => $.IamInstanceProfile, BlockDeviceMappings => list(dict(DeviceName => "/dev/sdg", Ebs => dict(VolumeSize => 40)))) %>
      
    create_auto_scaling_group:
      action: boto3.action
      input:
        region: <% $.Region %>
        service: autoscaling
        action_name: create_auto_scaling_group
        params: <% dict(LaunchConfigurationName => $.LaunchConfigurationName, AutoScalingGroupName => $.Asg_name, MinSize => $.MinSize, MaxSize => $.MaxSize, DesiredCapacity => $.DesiredCapacity, AvailabilityZones => $.AvailabilityZones, Tags => list(dict(Key => "Project", Value => "Nibiru-V3"), dict(Key => "Environment", Value => $.Environment), dict(Key => "App_type", Value => $.App_type), dict(Key => "Team", Value => $.Team), dict(Key => "Name", Value => "mongo-" + $.Environment + "-" + $.App_type + "-" + $.Team) )) %> 