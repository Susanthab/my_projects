version: '2.0'
name: couchbase.delete_couchbase_cluster
description: St2  workflow to delete Couchbase cluster on EC2.

workflows:

  main:
    type: direct
    input:
      - couchbase_spec

    vars:
      security_group_name: <% $.couchbase_spec['security_group_name'] %>
      iam_role_name: <% $.couchbase_spec['iam_role_name'] %>
      iam_policy_name: <% $.couchbase_spec['iam_policy_name'] %>
      cluster_name: <% $.couchbase_spec['cluster_name'] %>
      instance_name: <% $.couchbase_spec['instance_name'] %>
      vpc_id: <% $.couchbase_spec['vpc_id'] %>
      namespace: <% $.couchbase_spec['namespace'] %>
      environment: <% $.couchbase_spec['environment'] %>
      storage_type: <% $.couchbase_spec['storage_type'] %>
      app_id: <% $.couchbase_spec['app_id'] %>
      instance_type: <% $.couchbase_spec['instance_type'] %>
      key_name: <% $.couchbase_spec['key_name'] %>
      min_nof_nodes: <% $.couchbase_spec['min_nof_nodes'] %>
      max_nof_nodes: <% $.couchbase_spec['max_nof_nodes'] %>
      desired_capacity: <% $.couchbase_spec['desired_capacity'] %>
      volume_type: <% $.couchbase_spec['volume_type'] %>
      volume_size: <% $.couchbase_spec['volume_size'] %>
      full_backup_sch: <% $.couchbase_spec['full_backup_sch'] %>
      s3_backup_loc: "bitesize-<% $.couchbase_spec['environment_type'] %>/<% $.couchbase_spec['region'] %>/<% $.couchbase_spec['environment'] %>/backups/<% $.couchbase_spec['database_system'] %>/<% $.couchbase_spec['namespace'] %>"
      t_owner_individual: <% $.couchbase_spec['t_owner_individual'] %>
      role: <% $.couchbase_spec['role'] %>
      ebs_optimized: <% $.couchbase_spec['ebs_optimized'] %>
      region: <% $.couchbase_spec['region'] %>
      team_id: <% $.couchbase_spec['team_id'] %>
      database_system: <% $.couchbase_spec['database_system'] %>
      deployment_name: <% $.couchbase_spec['deployment_name'] %>
      lc_name: <% $.couchbase_spec['lc_name'] %>
      asg_name: <% $.couchbase_spec['asg_name'] %>
      pass: <% $.couchbase_spec['pass'] %>
      parameter_name: <% '/' + $.couchbase_spec['namespace'] + '/' +
                         $.couchbase_spec['role'] + '/' +
                         $.couchbase_spec['database_system'] + '/' +
                         $.couchbase_spec['deployment_name'] + '/' +
                         'administrator'  %>
      lb_name: "<% $.couchbase_spec['environment'] %>-<% $.couchbase_spec['database_system'] %>-<% $.couchbase_spec['namespace'] %>"
  
    tasks:

      get_config:
        action: bitesize.get_config
        publish:
          env: <% task(get_config).result.result.environment %>
          internal_domain: <% task(get_config).result.result.internal_domain %>
          envtype: <% task(get_config).result.result.internal_domain %>
          region: <% task(get_config).result.result.region %>
          internal_zoneid: <% task(get_config).result.result.internal_zoneid %>
          vpc_id: <% task(get_config).result.result.vpc_id %>
        on-success:
          - get_kv_list

      get_kv_list:
        wait-before: 5
        action: consul.kv_list
        input:
          key: <% $.namespace %>/<% $.database_system %>/<% $.deployment_name %>
          keys: False
          recurse: True
        publish:
          kv_list: <% task(get_kv_list).result.result[1] %>
          key_rule_arn: <% $.namespace %>/<% $.database_system %>/<% $.deployment_name %>/rule_arn
          key_cluster_status: <% $.namespace %>/<% $.database_system %>/<% $.deployment_name %>/cluster_status
          key_target_group_arn: <% $.namespace %>/<% $.database_system %>/<% $.deployment_name %>/target_group_arn
          key_policy_arn: <% $.namespace %>/<% $.database_system %>/<% $.deployment_name %>/policy_arn
        on-success:
          - get_kv_value

      get_kv_value:
        wait-before: 5
        action: core.noop
        publish:
          rule_arn: <% let(key_1 => $.key_rule_arn) -> $.kv_list.where($.Key = $key_1).select($.Value) %>
          cluster_status: <% let(key_2 => $.key_cluster_status) -> $.kv_list.where($.Key = $key_2).select($.Value) %>
          target_group_arn: <% let(key_3 => $.key_target_group_arn) -> $.kv_list.where($.Key = $key_3).select($.Value) %>
          policy_arn: <% let(key_4 => $.key_policy_arn) -> $.kv_list.where($.Key = $key_4).select($.Value) %>
        on-success:
          - delete_rule
          
      delete_rule:
        wait-before: 5
        action: aws_elbv2.delete_rule
        input: 
          RuleArn: <% $.rule_arn %>
        on-success:
          - delete_target_group

      delete_target_group:
        wait-before: 5
        action: aws_elbv2.delete_target_group
        input:
          TargetGroupArn: <% $.target_group_arn %>
        on-success:
          - delete_auto_scaling_group

      delete_auto_scaling_group:
        wait-before: 5
        action: aws_autoscaling.delete_auto_scaling_group
        input: 
          AutoScalingGroupName: <% $.asg_name %>
        on-success:
          - delete_launch_configuration

      delete_launch_configuration:
        wait-before: 5
        action: aws_autoscaling.delete_launch_configuration
        input:
          LaunchConfigurationName: <% $.lc_name %>
        on-success:
          - find_lb

      find_lb:
        wait-before: 5
        action: aws_elbv2.describe_load_balancers
        input:
          Names: ["<% $.lb_name %>"]
        publish:
          alb_arn: <% task(find_lb).result.result.LoadBalancers[0].LoadBalancerArn %>
          lb_dns_name: <% task(find_lb).result.result.LoadBalancers[0].DNSName %>
          lb_hosted_zone_id: <% task(find_lb).result.result.LoadBalancers[0].CanonicalHostedZoneId %>
          cluster_domain: "<% $.env %>.<% $.region %>.<% $.internal_domain %>"
        on-success:
          - delete_endpoint

      delete_endpoint:
        wait-before: 5
        action: aws_route53.change_resource_record_sets
        input:
          HostedZoneId: <% $.internal_zoneid %>
          ChangeBatch:
            Changes:
              - Action: DELETE
                ResourceRecordSet:
                  Name: "<% $.database_system %>.<% $.deployment_name %>.<% $.namespace %>.<% $.cluster_domain %>"
                  Type: "A"
                  AliasTarget:
                    HostedZoneId: <% $.lb_hosted_zone_id %>
                    DNSName: <% $.lb_dns_name %>
        on-success:
          - delete_iam_role

      delete_iam_role:
        wait-before: 5
        workflow: delete_iam_role
        input:
          role_name: <% $.iam_role_name %>
          policy_arn: <% $.policy_arn %>
        on-success:
          - delete_parameter

      delete_parameter:
        wait-before: 5
        action: aws_ssm.delete_parameter
        input:
          Name: <% $.parameter_name %>
        on-success:
          - delete_security_group

      delete_security_group:
        wait-before: 5
        action: aws_ec2.delete_security_group
        input:
          GroupName: <% $.security_group_name %>
        on-success:
          - update_cluster_status

      update_cluster_status:
        action: consul.kv_put
        input:
          key: <% $.namespace %>/<% $.database_system %>/<% $.deployment_name %>/cluster_status/
          value: <% 'DELETED' %>

  delete_iam_role:
    type: direct
    input:
      - role_name
      - policy_arn

    tasks:

      detach_iam_role:
        wait-before: 5
        action: aws_iam.remove_role_from_instance_profile
        input:
          InstanceProfileName: <% $.role_name %>
          RoleName: <% $.role_name %>
        on-success:
          - detach_role_policy

      detach_role_policy:
        wait-before: 5
        action: aws_iam.detach_role_policy
        input:
          RoleName: <% $.role_name %>
          PolicyArn: <% $.policy_arn %>
        on-success:
          - delete_policy

      delete_policy: 
        wait-before: 5
        action: aws_iam.delete_policy
        input:
          PolicyArn: <% $.policy_arn %>
        on-success:
          - delete_role

      delete_role:
        wait-before: 5
        action: aws_iam.delete_role
        input:
          RoleName: <% $.role_name %>
        on-success:
          - delete_iam_instance_profile

      delete_iam_instance_profile:
        wait-before: 5
        action: aws_iam.delete_instance_profile
        input:
          InstanceProfileName: <% $.role_name %>






      

      
