version: '2.0'
name: couchbase.bump_release_version_userdata
description: St2  workflow to update user-data piece in launch configuration of existing CB clusters.

workflows:

  main:
    type: direct
    input:
      - lc_name
      - ansible_couchb_release
      - docker_engine_version
      - namespace
      - deployment_name
      - role
      - database_system

    tasks:

      get_config:
        action: bitesize.get_config
        publish:
          environment: <% task(get_config).result.result.environment %>
          internal_domain: <% task(get_config).result.result.internal_domain %>
          environment_type: <% task(get_config).result.result.environment_type %>
          region: <% task(get_config).result.result.region %>
          internal_zoneid: <% task(get_config).result.result.internal_zoneid %>
          vpc_id: <% task(get_config).result.result.vpc_id %>
        on-success:
          - get_cluster_status

      get_cluster_status:
        action: consul.kv_get
        input:
          key: <% $.namespace %>/<% $.database_system %>/<% $.deployment_name %>/cluster_status/
          recurse: False
        publish:
          cluster_status: <% task(get_cluster_status).result.result %>
        on-success: 
          - manage_lc

      manage_lc:
        join: all
        workflow: manage_lc
        input:
          lc_name: <% $.lc_name %>
          environment_type: <% $.environment_type %>
          environment: <% $.environment %>
          ansible_couchb_release: <% $.ansible_couchb_release %>
          region: <% $.region %>

  manage_lc:
    type: direct
    input:
      - lc_name
      - environment_type
      - environment
      - ansible_couchb_release
      - region
      
    vars:
      user_data: |
                  #!/bin/bash
                  exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                  # setup AWS some variables
                  sleep 30
                  ec2_instance_id=$(curl -s http://instance-data/latest/meta-data/instance-id)
                  # set hostname
                  ip=$(hostname -i)
                  hostname=couchbase-$ec2_instance_id.<% $.environment_type %>.<% $.region %>.<% $.environment %>
                  echo "HOSTNAME=$hostname" >> /etc/sysconfig/network
                  echo "$ip $hostname" >> /etc/hosts
                  hostnamectl set-hostname $hostname
                  /etc/init.d/network restart
                  sed -i '/set_hostname/d' /etc/cloud/cloud.cfg
                  sed -i '/update_hostname/d' /etc/cloud/cloud.cfg
                  ssh-keyscan github.com >> ~/.ssh/known_hosts
                  # create a script that downloads and runs ansible files
                  mkdir -p /etc/ansible
                  chmod 0700 /etc/ansible
                  # add AWS config
                  mkdir -p /root/.aws
                  cat <<EOF  > /root/.aws/config
                  [default]
                  region = <% $.region %>
                  EOF
                  # setup ansible.cfg
                  mkdir -p /etc/ansible
                  cat<<EOFW >/etc/ansible/ansible.cfg
                  [defaults]
                  roles_path    = /etc/ansible/roles:/usr/share/ansible/roles
                  stdout_callback = actionable
                  EOFW
                  # Extra vars for couchbase-ansible
                  cat<<EOFW >/etc/ansible/extra_vars.yaml
                  bitesize_environment: <% $.environment %>
                  region: <% $.region %>
                  bitesize_environment_type: <% $.environment_type %>
                  ansible_ec2_instance_id: $ec2_instance_id
                  role: <% $.role %>
                  vpc_id: <% $.vpc_id %>
                  deployment_name: <% $.deployment_name %>
                  database_system: <% $.database_system %>
                  namespace: <% $.namespace %>
                  cluster_name: <% $.cluster_name %>
                  cluster_type: <% $.cluster_type %>
                  EOFW
                  # create a script that downloads and runs ansible files
                  cat <<EOF >/bin/ansible-wrapper.sh
                  #!/bin/bash
                  if pgrep -f "ansible" > /dev/null
                  then
                      error="Error: *ansible* processes are already running. Exiting."
                      pids=\$(pgrep -f "ansible")
                      pid_count=\$(echo "\$pids" | wc -l)
                      if [[ \$pid_count -lt 2 ]] && [[ \$pids == \$\$ ]] ; then
                          error=""
                      fi
                      if [[ -n \$error ]]
                      then
                          echo "\$error" | tee -a /var/log/messages
                          exit 1
                      fi
                  fi
                  # install github readonly key
                  # region is hardcoded intentionally.
                  aws ssm get-parameters --names "github_ro_key" --region eu-west-1 --with-decryption | jq -r ".Parameters[0].Value" > /root/.ssh/id_rsa
                  chmod 0400 /root/.ssh/id_rsa
                  # get the specific release of ansible-couchbase.
                  git clone --depth=1 -b <% $.ansible_couchb_release %> git@github.com:pearsontechnology/ansible-couchbase.git /tmp/ansible-couchbase | tee /var/log/ansible-last-run.log
                  ansible_files="playbook.yaml requirements.yaml"
                  for f in \$ansible_files; do
                    cp /tmp/ansible-couchbase/\$f /etc/ansible
                    chmod 0400 /etc/ansible/\$f
                  done
                  cp -ar /tmp/ansible-couchbase /etc/ansible/roles && rm -rf /tmp/ansible-couchbase | tee -a /var/log/ansible-last-run.log
                  echo localhost ansible_connection=local >/etc/ansible/hosts
                  ansible-galaxy install --force -r /etc/ansible/requirements.yaml | tee -a /var/log/ansible-last-run.log
                  ansible-playbook --extra-vars=@/etc/ansible/extra_vars.yaml /etc/ansible/playbook.yaml | tee -a /var/log/ansible-last-run.log
                  EOF
                  chmod +x /bin/ansible-wrapper.sh && /bin/ansible-wrapper.sh

    tasks:

      check_lc:
        action: aws_autoscaling.describe_launch_configurations
        input:
          LaunchConfigurationNames: <% list($.lc_name) %>
        publish:
          lc_name_returned: <% task(check_lc).result.result.LaunchConfigurations %>
        on-success:
          - create_lc

      create_lc:
        action: aws_autoscaling.create_launch_configuration
        input:
          LaunchConfigurationName: <% $.lc_name %>
          ImageId: <% $.lc_name_returned[0].ImageId %>
          InstanceType: <% $.lc_name_returned[0].InstanceType %>
          KeyName: <% $.lc_name_returned[0].KeyName %>
          SecurityGroups: <% $.lc_name_returned[0].SecurityGroups %>
          IamInstanceProfile: <% $.lc_name_returned[0].IamInstanceProfile %>
          UserData: <% $.user_data %>
          EbsOptimized: <% $.lc_name_returned[0].EbsOptimized %>
          BlockDeviceMappings:
            - DeviceName: <% $.lc_name_returned[0].BlockDeviceMappings[0].DeviceName %>
              Ebs:
                VolumeSize: <% $.lc_name_returned[0].BlockDeviceMappings[0].Ebs.VolumeSize %>
                VolumeType: <% $.lc_name_returned[0].BlockDeviceMappings[0].Ebs.VolumeType %>
            - DeviceName: <% $.lc_name_returned[0].BlockDeviceMappings[1].DeviceName %>
              Ebs:
                VolumeSize: <% $.lc_name_returned[0].BlockDeviceMappings[1].Ebs.VolumeSize %>
                VolumeType: <% $.lc_name_returned[0].BlockDeviceMappings[1].Ebs.VolumeType %>