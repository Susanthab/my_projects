import time
import boto3
from st2actions.runners.pythonrunner import Action

# pylint: disable=too-few-public-methods
class remove_rebalance(Action):
    def run(self, region, credentials, instanceId, username, password, server_remove_ip):

        client=None
        reponse=None
        Command=None
        CommandId=None
        output_string=""

        if credentials is not None:
           session = boto3.Session(
                aws_access_key_id=credentials['Credentials']['AccessKeyId'],
                aws_secret_access_key=credentials['Credentials']['SecretAccessKey'],
                aws_session_token=credentials['Credentials']['SessionToken'])
           client = session.client('ssm', region_name=region)
        else:
            client = boto3.client('ssm', region_name=region)

        if client is None:
            output_string = "ec2 client creation failed"
            return (False, output_string)

        Command = client.send_command( InstanceIds= [instanceId], DocumentName='AWS-RunShellScript', Comment='host-list', Parameters={ "commands":[ "/opt/couchbase/bin/couchbase-cli host-list -c " + server_remove_ip + " -u " + username + " -p " + password + "" ] })
        CommandId=Command['Command']['CommandId']
        Command = client.send_command( InstanceIds= [instanceId], DocumentName='AWS-RunShellScript', Comment='host-list', Parameters={ "commands":[ "/opt/couchbase/bin/couchbase-cli rebalance -c " + server_remove_ip + " -u " + username + " -p " + password + "--server-remove=" + server_remove_ip + "" ] })

        time.sleep(30)

        response_cmd_invo = client.get_command_invocation( CommandId = CommandId, InstanceId = instanceId )['StandardOutputContent']

        for ip in response_cmd_invo:
          print ip

        return (True, response_cmd_invo)